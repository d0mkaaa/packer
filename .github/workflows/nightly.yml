name: Nightly Build

on:
  push:
    branches: [main, master]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build-nightly:
    name: Build Nightly
    runs-on: ubuntu-latest
    if: github.repository_owner == 'd0mkaaa'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-nightly-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release
      run: cargo build --release --verbose
      
    - name: Prepare artifacts
      run: |
        mkdir -p artifacts
        cp target/release/packer artifacts/packer-nightly-linux-x86_64
        cd artifacts
        tar -czf packer-nightly-linux-x86_64.tar.gz packer-nightly-linux-x86_64
        
    - name: Get commit info
      id: commit
      run: |
        echo "SHA=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "DATE=$(date +%Y%m%d)" >> $GITHUB_OUTPUT
        
    - name: Check if nightly release exists
      id: check_release
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const { data: release } = await github.rest.repos.getReleaseByTag({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag: 'nightly'
            });
            return { exists: true, id: release.id, upload_url: release.upload_url };
          } catch (error) {
            if (error.status === 404) {
              return { exists: false };
            }
            throw error;
          }
          
    - name: Create nightly release
      if: steps.check_release.outputs.exists == 'false'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: nightly
        release_name: Nightly Build
        body: |
          üåô **Nightly Build** - Built from latest main branch
          
          **‚ö†Ô∏è Warning**: This is a development build and may be unstable.
          
          **Commit**: ${{ steps.commit.outputs.SHA }}
          **Date**: ${{ steps.commit.outputs.DATE }}
          
          For stable releases, see [releases page](https://github.com/d0mkaaa/packer/releases).
        draft: false
        prerelease: true
        
    - name: Update nightly release
      if: steps.check_release.outputs.exists == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ fromJson(steps.check_release.outputs.result).id }},
            body: `üåô **Nightly Build** - Built from latest main branch
            
          **‚ö†Ô∏è Warning**: This is a development build and may be unstable.
          
          **Commit**: ${{ steps.commit.outputs.SHA }}
          **Date**: ${{ steps.commit.outputs.DATE }}
          
          For stable releases, see [releases page](https://github.com/d0mkaaa/packer/releases).`
          });
          
    - name: Delete existing nightly assets
      if: steps.check_release.outputs.exists == 'true'
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          const { data: assets } = await github.rest.repos.listReleaseAssets({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ fromJson(steps.check_release.outputs.result).id }}
          });
          
          for (const asset of assets) {
            if (asset.name.includes('nightly')) {
              await github.rest.repos.deleteReleaseAsset({
                owner: context.repo.owner,
                repo: context.repo.repo,
                asset_id: asset.id
              });
            }
          }
          
    - name: Upload nightly asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.check_release.outputs.exists == 'true' && fromJson(steps.check_release.outputs.result).upload_url || steps.create_release.outputs.upload_url }}
        asset_path: artifacts/packer-nightly-linux-x86_64.tar.gz
        asset_name: packer-nightly-linux-x86_64.tar.gz
        asset_content_type: application/gzip