name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Get tag
      id: get_tag
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "TAG=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        
    - name: Generate release notes
      id: generate_notes
      run: |
        TAG="${{ steps.get_tag.outputs.TAG }}"
        # extract changelog section for this version
        awk "/^## \[${TAG#v}\]/{flag=1; next} /^## \[/{flag=0} flag" CHANGELOG.md > release_notes.md
        # if empty, use a default message
        if [ ! -s release_notes.md ]; then
          echo "Release $TAG" > release_notes.md
          echo "" >> release_notes.md
          echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
        fi
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_tag.outputs.TAG }}
        release_name: Packer ${{ steps.get_tag.outputs.TAG }}
        body_path: release_notes.md
        draft: false
        prerelease: false

  build-and-upload:
    name: Build and Upload
    needs: create-release
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: packer-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: packer-linux-x86_64-static
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: packer-linux-aarch64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: packer-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: packer-macos-aarch64
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation tools
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-aarch64-linux-gnu
        
    - name: Install musl tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          export CC=aarch64-linux-gnu-gcc
          export CXX=aarch64-linux-gnu-g++
        fi
        cargo build --release --target ${{ matrix.target }} --verbose
        
    - name: Prepare binary
      run: |
        mkdir -p artifacts
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/packer.exe artifacts/
          cd artifacts && 7z a ${{ matrix.name }}.zip packer.exe
        else
          cp target/${{ matrix.target }}/release/packer artifacts/
          cd artifacts && tar -czf ${{ matrix.name }}.tar.gz packer
        fi
        
    - name: Upload Release Asset (Linux/macOS)
      if: matrix.os != 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: artifacts/${{ matrix.name }}.tar.gz
        asset_name: ${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip
        
  build-windows:
    name: Build Windows
    needs: create-release
    runs-on: windows-latest
    strategy:
      matrix:
        target: [x86_64-pc-windows-msvc, x86_64-pc-windows-gnu]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: 1.88
        targets: ${{ matrix.target }}
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: windows-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }} --verbose
      
    - name: Prepare binary
      run: |
        mkdir artifacts
        copy target\${{ matrix.target }}\release\packer.exe artifacts\
        cd artifacts
        7z a packer-windows-${{ matrix.target }}.zip packer.exe
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: artifacts/packer-windows-${{ matrix.target }}.zip
        asset_name: packer-windows-${{ matrix.target }}.zip
        asset_content_type: application/zip

  update-latest:
    name: Update Latest Release
    needs: [create-release, build-and-upload, build-windows]
    runs-on: ubuntu-latest
    if: always() && (needs.build-and-upload.result == 'success' || needs.build-windows.result == 'success')
    
    steps:
    - name: Update latest release
      uses: actions/github-script@v7
      with:
        script: |
          // mark this release as latest
          await github.rest.repos.updateRelease({
            owner: context.repo.owner,
            repo: context.repo.repo,
            release_id: ${{ needs.create-release.outputs.release_id }},
            make_latest: true
          });
          
          console.log('Updated release as latest');